// https://www.codewars.com/kata/5ef9ca8b76be6d001d5e1c3e/train/rust
// Error correction #1 - Hamming Code

pub fn encode(text: &str) -> String {
    text.chars()
        .map(|c| {
            format!("{:08b}", (c as u8))
                .chars()
                .map(|b| b.to_string().repeat(3))
                .collect::<String>()
        })
        .collect()
}

pub fn decode(bits: &str) -> String {
    bits.chars()
        .collect::<Vec<char>>()
        .chunks_exact(3)
        .map(|x| {
            if x.iter().fold(0, |acc, &a| acc + a.to_digit(10).unwrap()) >= 2 {
                '1'
            } else {
                '0'
            }
        })
        .collect::<Vec<char>>()
        .chunks_exact(8)
        .map(|s| s.iter().collect::<String>())
        .map(|s| u8::from_str_radix(&s, 2).unwrap() as char)
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_encode_short_word() {
        assert_eq!(
            encode("hey"),
            "000111111000111000000000000111111000000111000111000111111111111000000111"
        );
    }

    #[test]
    fn test_encode_long_word() {
        assert_eq!(encode("The Sensei told me that i can do this kata
    }

    #[test]
    fn test_encode_numbers() {
        assert_eq!(encode("T3st"), "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000");
    }

    #[test]
    fn test_encode_special_chars() {
        assert_eq!(encode("T?st!%"), "000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111");
    }

    #[test]
    fn test_decode_short_word() {
        assert_eq!(
            decode("100111111000111001000010000111111000000111001111000111110110111000010111"),
            "hey"
        );
    }

    #[test]
    fn test_decode_long_word() {
        assert_eq!(decodehe Sensei told me that i can do this kata");
    }

    #[test]
    fn test_decode_numbers() {
        assert_eq!(decode("000111000111000111000010000000111111000000111111000111111111000000111111000111111111000111010000"), "T3st");
    }

    #[test]
    fn test_decode_special_chars() {
        assert_eq!(decode("000111000111000111000001000000111111110111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111"), "T?st!%");
    }
}
